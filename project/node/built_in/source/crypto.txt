
🔍 Type to search 
《Node.js技术栈》
Introduction

简介
JavaScript

基础
快速导航
常见问题
undefined与undeclared的区别
欺骗词法作用域
类型检测
错误
数组去重的三种实现方式
数组降维
This
函数
对象
原型
正则
浮点数之谜：0.1 + 0.2 为什么不等于 0.3？
浮点数之迷：大数危机？
ECMAScript6

let&const 变量声明
对象&数组解构赋值
数据类型功能扩展系列
Set、Map 数据结构
Promise
Decorators
Symbol
Generator
TypeScript

入门篇
面向对象程序设计
Node.js 基础

Node.js 是什么？我为什么选择它？
Node.js 版本知多少？又该如何选择？
“3N 兄弟” 助您完成 Node.js 环境搭建
Node.js 包管理器 NPM
多维度分析 Express、Koa 之间的区别
Node.js 模块

Module 模块机制
Events 事件触发器
Crypto 加解密模块
Buffer 缓冲区模块
Process 线程和进程
Console 日志模块
Net 网络模块
DNS 域名解析
Cluster 集群模块
Stream - 多文件合并实现
Stream - pipe 基本使用与实现分析
Stream - internal/stremas/egacy.js 文件分析
Util 工具模块 - promisify 实现原理
ES Modules 入门使用
Node.js 进阶

Egg-Logger 模块实践
I/O 模型浅谈
Memory 内存管理和V8垃圾回收机制
Cache 缓存
Schedule 定时任务
Template 模板引擎
Testing 测试
Framework Web 开发框架选型
ORM 对象关系映射
Middleware 常用 Web 框架&中间件汇总
深入 Nodejs 源码探究 CPU 信息的获取与实时计算
Node.js 中出现未捕获异常如何处理？
Node.js 翻译

你需要了解的有关 Node.js 的所有信息
不容错过的 Node.js 项目架构
Node.js 实践

企业实践
框架实践
DataBase | Redis

基础总结
五种数据结构
高级特性
主从复制
数据持久化
哨兵高可用
集群模式
缓存设计
应用场景
面试指南
实践 | Redis 计数器实现并发场景下的优惠券领取功能
实践 | Node.js 中实践 Redis Lua 脚本
实践 | Node.js 中实践 Redis 分布式锁
DataBase | MongoDB

MongoDB 安装入门篇
MongoDB CURD 操作
MongoDB Indexes 索引
MongoDB 常用操作符
MongoDB 复制集 | 理论篇
MongoDB 复制集 | 实践篇
MongoDB 事务 | 基础篇
MongoDB 事务 | 多文档事务实践篇
ServerLess

Node.js 快速开启 Serverless Functions：入门实践指南
TypeScript + Serverless 开发 REST API 实战
使用 Serverless, Nodejs, MongoDB Atlas cloud 构建 REST API
Microservice

服务注册与发现 Consul
数据通信方式 RPC、HTTP、消息队列
RabbitMQ：入门篇
RabbitMQ：交换机消息投递机制
RabbitMQ：DLX（死信队列）+ TTL 实现延迟队列
RabbitMQ：Delayed Message 插件实现延迟队列
RabbitMQ：高并发下消费端限流实践
RabbitMQ：服务异常重连
HTTP

理论加实践搞懂浏览器缓存策略
Nginx 代理服务配置缓存实践
HTTP 长链接 — HTTP1.1 与 HTTP2 下的对比
跨域（CORS）产生的原因分析与解决方案
Socket hang up 是什么？什么情况下会发生？
DNS 域名解析过程？
内容安全策略（CSP）
URI/URL/URN
Cookie 和 Session
DevOps

Node.js 生产环境完整部署指南
NPM 模块管理应用实践
Docker系列一：入门到实践
Docker系列二：Node.js 服务容器化实践
Docker系列三：Node.js 进程的优雅退出
工具

Nodejs 项目开发中应用 ESLint 代码规范
Git 常用命令及日常问题集锦
SEO 网站优化 title 置与快速排名
Docsify 快速搭建个人博客
数据结构与算法

Queue 队列
Stack 栈
Linear List 线性表
BST 二叉搜索树
资料

书籍推荐
Blog推荐
文章推荐
JavaScript基础问题
快速导航
[基础] 常见问题

[基础] undefined与undeclared的区别？

[基础] typeof、instanceof 类型检测

[作用域] eval()、with 欺骗词法作用域

[Error] 错误类型ReferenceError、TypeError的区别？

[数组去重] 数组去重的三种实现方式

[数组降维] 数组降维--扁平化多维数组

常见问题
JavaScript七种内置类型: number、string、boolean、undefined、null、object、symbol(ES6新增加)
基本类型：指保存在栈内存中的数据，引用类型：(对象引用)指保存在堆内存中的对象，传递的是引用的地址
弱类型：变量没有类型, 变量持有的值有类型
(typeof null === 'object') = true，正确的返回值应该是null，但是这个bug由来已久。 (undefined == null) = true
indexOf为ECMAScript5新方法，IE8及以下不支持
setTimeout(callback, 100)，setTimeout只接受一个函数做为参数不接受闭包，因为闭包会自执行，Nodejs 下最小延迟 1ms 参见 v12.x timers.js#L167
undefined与undeclared的区别
undefined： 已在作用域中声明但还没有赋值的变量是undefined。

undeclared： 还没有在作用域中声明过的变量是undeclared，对于undeclared这种情况typeof处理的时候返回的是undefined。

欺骗词法作用域
词法作用域由写代码期间函数所声明的位置来定义，javascript有两种机制(eval()、with)在运行时来修改词法作用域，这样做通常会导致性能下降，内存泄漏问题。

eval函数接收一个字符串为参数，解析字符串生成代码并运行
function test(str, b){
    eval(str);

    console.log(a, b);
}

var a = 1;

test("var a = 3", 2); // 3 2

console.log(a); // 1
上面这段代码示例，eval调用的str相当于在test函数作用域内部声明了一个新的变量b，当console.log()在打印时会在foo函数内部找到a和b，将无法找到外部的a，因此最终输出结果是3和2，最外层a仍就输出是1，两者比较可以看到效果。

with通常被当作重复引用同一个对象中的多个属性的快捷方式
{
function withObj(obj){
    with(obj){
        a = 2
    }
}

let o1 = {
    a: 1,
}

let o2 = {
    b: 1,
}

withObj(o1);
console.log(o1.a); // 2

withObj(o2);
console.log(o2.a); // undefined
console.log(a); // 2
}
以上示例中withObj(obj)函数接受一个obj参数，该参数是一个对象引用，执行了with，o1传进去，a=2赋值操作找到了o1.a并将2赋值给它，o2传进去，因为o2没有a属性，就不会创建这个属性，o2.a保持undefined，这个时候就会创建一个新的全局变量a。

对性能的影响
javascript引擎在编译阶段会进行性能优化，很多优化依赖于能够根据代码词法进行静态分析，预先确定了变量和函数的定义位置，才能快速找到标识符，但是在词法分析阶段遇到了with或eval无法明确知道它们会接收什么代码，也就无法判断标识符的位置，最简单的做法就是遇到with或eval不做任何优化，使用其中一个都会导致代码运行变慢，因此，请不要使用他们。

类型检测
typeof：基本类型用typeof来检测

instanceof：用来检测是否为数组、对象、正则

let box = [1,2,3];
console.log(box instanceof Array); //true

let box1={};
console.log(box1 instanceof Object); //true

let box2=/g/;
console.log(box2 instanceof RegExp); //true
错误
ReferenceError错误
如果在所有嵌套的作用域中遍寻不到所需的变量，引擎会抛出ReferenceError错误，意味这，这是一个未声明的变量，这个错误是一个非常重要的异常类型。

console.log('a: ', a); // Uncaught ReferenceError: a is not defined
let a = 2;
TypeError错误
这种错误表示作用域判别成功，但是进行了非法的操作，例如，对一个非函数类型的值进行函数调用，或者引用null、undefined类型的值中的属性，将会抛出TypeError异常错误。

let a = null; // 或者a = undefined
console.log(a.b); // Uncaught TypeError: Cannot read property 'b' of null
对一个非函数类型的值进行函数调用

let a = 2;
a(); // TypeError: a is not a function
数组去重的三种实现方式
Set数组去重
ES6新的数据结构Set，类似于数组，它的元素都是唯一的。

{
let arr = [1, 22, 33, 44, 22, 44];

console.log([...new Set(arr)]); //[1, 22, 33, 44]
}
reduce数组对象去重
reduce对数组中的每一个元素依次执行回调函数，不含数组中未赋值、被删除的元素，回调函数接收四个参数

callback：执行数组中每个值的函数，包含四个参数
previousValue：上一次调用回调返回的值，或者是提供的初始值（initialValue）
currentValue：数组中当前被处理的元素
index：当前元素在数组中的索引
array：调用 reduce 的数组
initialValue：可选，作为第一次调用 callback 的第一个参数。
示例：

let hash = {};

function unique(arr, initialValue){
    return arr.reduce(function(previousValue, currentValue, index, array){
        hash[currentValue.name] ? '' : hash[currentValue.name] = true && previousValue.push(currentValue);

        return previousValue
    }, initialValue);
}

const uniqueArr = unique([{name: 'zs', age: 15}, {name: 'lisi'}, {name: 'zs'}], []);

console.log(uniqueArr); // uniqueArr.length == 2
参考lodash
_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');

// => [{ 'x': 1 }, { 'x': 2 }]
数组降维
方法一：将数组字符串化
利用数组与字符串的隐式转换，使用+符号链接一个对象，javascript会默认调用toString方法转为字符串，再使用字符串分割成字符串数组，最后转成数值形数组

let arr = [[222, 333, 444], [55, 66, 77], 11, ]
arr += '';
arr = arr.split(',');
arr = arr.map(item => Number(item));

console.log(arr); // [222, 333, 444, 55, 66, 77, 11]
方法二：利用apply和concat转换
concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。

{
    function reduceDimension(arr) {
        return Array.prototype.concat.apply([], arr);
    }

    console.log(reduceDimension([[123], 4, [7, 8],[9, [111]]]));
    // [123, 4, 7, 8, 9, Array(1)]
}
方法三 自定义函数实现
推荐使用，经测试这个是执行效率最高的。

function reduceDimension(arr){
    let ret = [];

    let toArr = function(arr){
        arr.forEach(function(item){
            item instanceof Array ? toArr(item) : ret.push(item);
        });
    }

    toArr(arr);

    return ret;
}

let arr = [[12], 4, [333, [4444, 5555]], [9, [111, 222]]];

for(let i = 0; i < 100000; i++){
    arr.push(i);
}

let start = new Date().getTime();

console.log('reduceDimension: ', reduceDimension(arr));
console.log('耗时: ', new Date().getTime() - start);
 PREVIOUS
简介
NEXT 
This
5 条评论未登录用户
 
说点什么
支持 Markdown 语法预览使用 GitHub 登录
@haizhilin2013
haizhilin2013发表于12 个月前
解析得很好！

@hanxingdianbing
hanxingdianbing发表于12 个月前
confdssll

@Iamxiaozhu
Iamxiaozhu发表于9 个月前
setTimeout应该还可以接受返回值为函数的闭包
let a = 2; a(); 这个地方的注释应该不太对

@qufei1993
qufei1993发表于9 个月前
@Iamxiaozhu
setTimeout应该还可以接受返回值为函数的闭包
let a = 2; a(); 这个地方的注释应该不太对

没必要绕一圈闭包里面在返回一个函数吧

@yuexiangqianlong
yuexiangqianlong发表于4 个月前
数组降维可以用lodash里的flatten 或者 _.flattenDeep

